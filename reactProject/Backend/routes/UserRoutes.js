const express = require('express');const jwt = require('jsonwebtoken');const { registerUser, authenticateUser, updateUserPassword, deleteUser, updateUserRole } = require('../models/userModel');const router = express.Router();// Секретный ключ для JWT, должен храниться в переменных окруженияconst JWT_SECRET = process.env.JWT_SECRET || 'ppjasd5ng397OcO7rvuF+v/9yfglASV3lX7tCg2lzdY=';// Middleware для проверки JWT токенаconst authenticateToken = (req, res, next) => {  const authHeader = req.headers.authorization;  const token = authHeader && authHeader.split(' ')[1];  if (!token) return res.status(401).json({ message: "Токен не предоставлен." });  jwt.verify(token, JWT_SECRET, (err, user) => {    if (err) return res.status(403).json({ message: "Токен недействителен." });    req.user = user;    next();  });};// Регистрация нового пользователяrouter.post('/register', async (req, res) => {  try {    const { username, email, password } = req.body;    const newUser = await registerUser(username, password, email);    const token = jwt.sign({ id: newUser.id, username: newUser.username, role: newUser.role }, JWT_SECRET, { expiresIn: '1h' });    res.status(201).json({ user: newUser, token });  } catch (error) {    res.status(500).json({ message: "Ошибка при регистрации пользователя: " + error.message });  }});// Аутентификация пользователя и возврат JWT токенаrouter.post('/login', async (req, res) => {  try {    const { username, password } = req.body;    const user = await authenticateUser(username, password);    if (!user) {      return res.status(401).json({ message: "Неверные учетные данные." });    }    const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, JWT_SECRET, { expiresIn: '1h' });    res.status(200).json({ message: "Пользователь успешно аутентифицирован.", token, user });  } catch (error) {    res.status(500).json({ message: "Ошибка аутентификации из-за серверной ошибки: " + error.message });  }});// Проверка JWT токенаrouter.post('/validateToken', authenticateToken, (req, res) => {  res.json({ user: req.user }); // Возвращаем информацию о пользователе});// Обновление пароля пользователяrouter.put('/updatePassword', authenticateToken, async (req, res) => {  try {    const { username, newPassword } = req.body;    const result = await updateUserPassword(username, newPassword);    if (!result) {      return res.status(404).json({ message: "Пользователь не найден." });    }    res.status(200).json({ message: "Пароль успешно обновлен.", userId: result.userId });  } catch (error) {    res.status(500).json({ message: "Не удалось обновить пароль из-за серверной ошибки: " + error.message });  }});// Обновление роли пользователяrouter.put('/updateUserRole', authenticateToken, async (req, res) => {  try {    const { username, newRole } = req.body;    const updatedUser = await updateUserRole(username, newRole);    if (!updatedUser) {      return res.status(404).json({ message: "Пользователь не найден." });    }    res.status(200).json({ message: "Роль пользователя успешно обновлена.", user: updatedUser });  } catch (error) {    res.status(500).json({ message: "Не удалось обновить роль пользователя из-за серверной ошибки: " + error.message });  }});// Удаление пользователяrouter.delete('/deleteUser', authenticateToken, async (req, res) => {  try {    const { username } = req.body;    const deletedUser = await deleteUser(username);    if (!deletedUser) {      return res.status(404).json({ message: "Пользователь не найден." });    }    res.status(200).json({ message: "Пользователь успешно удален.", user: deletedUser });  } catch (error) {    res.status(500).json({ message: "Не удалось удалить пользователя из-за серверной ошибки: " + error.message });  }});module.exports = router;